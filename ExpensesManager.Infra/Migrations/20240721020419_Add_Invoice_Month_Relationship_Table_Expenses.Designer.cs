// <auto-generated />
using System;
using ExpensesManager.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ExpensesManager.Infra.Migrations
{
    [DbContext(typeof(ExpensesManagerContext))]
    [Migration("20240721020419_Add_Invoice_Month_Relationship_Table_Expenses")]
    partial class Add_Invoice_Month_Relationship_Table_Expenses
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ExpensesManager.Domain.Entities.CreditCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("credit_card", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5432896-1184-4921-a161-f6ec4486aaec"),
                            CreatedAt = new DateTime(2024, 7, 20, 23, 4, 18, 932, DateTimeKind.Local).AddTicks(2520),
                            Name = "Inter Gold"
                        },
                        new
                        {
                            Id = new Guid("427d534e-6f68-46e9-aadc-655853e50691"),
                            CreatedAt = new DateTime(2024, 7, 20, 23, 4, 18, 932, DateTimeKind.Local).AddTicks(2540),
                            Name = "Inter Black"
                        },
                        new
                        {
                            Id = new Guid("c3ba3e4f-6928-4652-99f5-6a6b208ffb42"),
                            CreatedAt = new DateTime(2024, 7, 20, 23, 4, 18, 932, DateTimeKind.Local).AddTicks(2550),
                            Name = "Amex TGC"
                        },
                        new
                        {
                            Id = new Guid("e8fbde5b-2084-449f-8ea3-2e31a522e765"),
                            CreatedAt = new DateTime(2024, 7, 20, 23, 4, 18, 932, DateTimeKind.Local).AddTicks(2560),
                            Name = "XP Visa Infinite"
                        },
                        new
                        {
                            Id = new Guid("4e23155c-6275-4c44-b34f-b63f638d40a6"),
                            CreatedAt = new DateTime(2024, 7, 20, 23, 4, 18, 932, DateTimeKind.Local).AddTicks(2570),
                            Name = "BB Elo Mais"
                        },
                        new
                        {
                            Id = new Guid("82e8d759-4932-4f4c-9c5f-56d8f10f381b"),
                            CreatedAt = new DateTime(2024, 7, 20, 23, 4, 18, 932, DateTimeKind.Local).AddTicks(2580),
                            Name = "C6 Bank Standard"
                        });
                });

            modelBuilder.Entity("ExpensesManager.Domain.Entities.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreditCardName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("credit_card_name");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("InvoiceMonthId")
                        .HasMaxLength(10)
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_month_id");

                    b.Property<bool>("IsInstallment")
                        .HasColumnType("boolean")
                        .HasColumnName("is_installment");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("purchase_date");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceMonthId");

                    b.HasIndex("PersonId");

                    b.ToTable("expenses", (string)null);
                });

            modelBuilder.Entity("ExpensesManager.Domain.Entities.InvoiceMonth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("invoice_months", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9b5f349-2e84-4078-9186-f76da1315f63"),
                            Code = 1,
                            CreatedAt = new DateTime(2024, 7, 20, 23, 4, 18, 932, DateTimeKind.Local).AddTicks(3200),
                            Name = "Janeio"
                        },
                        new
                        {
                            Id = new Guid("3931991f-1962-445d-98d9-17f9733876fa"),
                            Code = 2,
                            CreatedAt = new DateTime(2024, 7, 20, 23, 4, 18, 932, DateTimeKind.Local).AddTicks(3210),
                            Name = "Fevereiro"
                        },
                        new
                        {
                            Id = new Guid("acedef82-d5ce-4bdf-b956-13b7c695bbd1"),
                            Code = 3,
                            CreatedAt = new DateTime(2024, 7, 20, 23, 4, 18, 932, DateTimeKind.Local).AddTicks(3220),
                            Name = "Marco"
                        },
                        new
                        {
                            Id = new Guid("5e43043e-6260-486b-9433-0cb4aadf3854"),
                            Code = 4,
                            CreatedAt = new DateTime(2024, 7, 20, 23, 4, 18, 932, DateTimeKind.Local).AddTicks(3230),
                            Name = "Abril"
                        },
                        new
                        {
                            Id = new Guid("1afac8dd-1436-4c40-8b5a-627b478537d1"),
                            Code = 5,
                            CreatedAt = new DateTime(2024, 7, 20, 23, 4, 18, 932, DateTimeKind.Local).AddTicks(3240),
                            Name = "Maio"
                        },
                        new
                        {
                            Id = new Guid("fe2c6c70-5b43-466b-9296-f80a49c10f2a"),
                            Code = 6,
                            CreatedAt = new DateTime(2024, 7, 20, 23, 4, 18, 932, DateTimeKind.Local).AddTicks(3240),
                            Name = "Junho"
                        },
                        new
                        {
                            Id = new Guid("9b0a31f4-ff93-4e73-84ab-c1907b52415b"),
                            Code = 7,
                            CreatedAt = new DateTime(2024, 7, 20, 23, 4, 18, 932, DateTimeKind.Local).AddTicks(3250),
                            Name = "Julho"
                        },
                        new
                        {
                            Id = new Guid("af790125-d828-4d12-a404-7cabb826035e"),
                            Code = 8,
                            CreatedAt = new DateTime(2024, 7, 20, 23, 4, 18, 932, DateTimeKind.Local).AddTicks(3260),
                            Name = "Agosto"
                        },
                        new
                        {
                            Id = new Guid("f4942526-e38e-41fd-a965-18e87503a13f"),
                            Code = 9,
                            CreatedAt = new DateTime(2024, 7, 20, 23, 4, 18, 932, DateTimeKind.Local).AddTicks(3270),
                            Name = "Setembro"
                        },
                        new
                        {
                            Id = new Guid("3f37999e-8808-4d91-883a-5b53b7460d65"),
                            Code = 10,
                            CreatedAt = new DateTime(2024, 7, 20, 23, 4, 18, 932, DateTimeKind.Local).AddTicks(3270),
                            Name = "Outubro"
                        },
                        new
                        {
                            Id = new Guid("bfbbddc0-4b42-49d6-8cf8-8bc11ff7da90"),
                            Code = 11,
                            CreatedAt = new DateTime(2024, 7, 20, 23, 4, 18, 932, DateTimeKind.Local).AddTicks(3280),
                            Name = "Novembro"
                        },
                        new
                        {
                            Id = new Guid("99164a93-c21c-45c7-9c18-a354f0c48bdc"),
                            Code = 12,
                            CreatedAt = new DateTime(2024, 7, 20, 23, 4, 18, 932, DateTimeKind.Local).AddTicks(3290),
                            Name = "Dezembro"
                        });
                });

            modelBuilder.Entity("ExpensesManager.Domain.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("people", (string)null);
                });

            modelBuilder.Entity("ExpensesManager.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.HasKey("Id")
                        .HasName("id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ExpensesManager.Domain.Entities.Expense", b =>
                {
                    b.HasOne("ExpensesManager.Domain.Entities.InvoiceMonth", "InvoiceMonth")
                        .WithMany("Expenses")
                        .HasForeignKey("InvoiceMonthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("invoice_month_id");

                    b.HasOne("ExpensesManager.Domain.Entities.Person", "Person")
                        .WithMany("Expenses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("person_id");

                    b.Navigation("InvoiceMonth");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ExpensesManager.Domain.Entities.Person", b =>
                {
                    b.HasOne("ExpensesManager.Domain.Entities.User", "User")
                        .WithMany("People")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExpensesManager.Domain.Entities.InvoiceMonth", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("ExpensesManager.Domain.Entities.Person", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("ExpensesManager.Domain.Entities.User", b =>
                {
                    b.Navigation("People");
                });
#pragma warning restore 612, 618
        }
    }
}
