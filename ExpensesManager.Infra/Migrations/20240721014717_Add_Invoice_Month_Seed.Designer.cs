// <auto-generated />
using System;
using ExpensesManager.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ExpensesManager.Infra.Migrations
{
    [DbContext(typeof(ExpensesManagerContext))]
    [Migration("20240721014717_Add_Invoice_Month_Seed")]
    partial class Add_Invoice_Month_Seed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ExpensesManager.Domain.Entities.CreditCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("credit_card", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("49dc3995-cdb5-4b71-b1c2-3bd25509b839"),
                            CreatedAt = new DateTime(2024, 7, 20, 22, 47, 17, 674, DateTimeKind.Local).AddTicks(9980),
                            Name = "Inter Gold"
                        },
                        new
                        {
                            Id = new Guid("223057d4-6dc5-4ee5-8ff3-363a61426402"),
                            CreatedAt = new DateTime(2024, 7, 20, 22, 47, 17, 675, DateTimeKind.Local).AddTicks(10),
                            Name = "Inter Black"
                        },
                        new
                        {
                            Id = new Guid("3c0896a6-9186-4fbd-a480-b294a0058feb"),
                            CreatedAt = new DateTime(2024, 7, 20, 22, 47, 17, 675, DateTimeKind.Local).AddTicks(30),
                            Name = "Amex TGC"
                        },
                        new
                        {
                            Id = new Guid("a9d8a2e4-699a-4019-b15e-f5ffa1e3a0a8"),
                            CreatedAt = new DateTime(2024, 7, 20, 22, 47, 17, 675, DateTimeKind.Local).AddTicks(40),
                            Name = "XP Visa Infinite"
                        },
                        new
                        {
                            Id = new Guid("ae7005a9-7df2-47bd-b148-4a54741ce3aa"),
                            CreatedAt = new DateTime(2024, 7, 20, 22, 47, 17, 675, DateTimeKind.Local).AddTicks(50),
                            Name = "BB Elo Mais"
                        },
                        new
                        {
                            Id = new Guid("e7073716-0d35-4c7e-a29e-adf1e8e31aec"),
                            CreatedAt = new DateTime(2024, 7, 20, 22, 47, 17, 675, DateTimeKind.Local).AddTicks(60),
                            Name = "C6 Bank Standard"
                        });
                });

            modelBuilder.Entity("ExpensesManager.Domain.Entities.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreditCardName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("credit_card_name");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("InvoiceMonth")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("invoice_month");

                    b.Property<bool>("IsInstallment")
                        .HasColumnType("boolean")
                        .HasColumnName("is_installment");

                    b.Property<bool>("Paid")
                        .HasColumnType("boolean")
                        .HasColumnName("paid");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("purchase_date");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("expenses", (string)null);
                });

            modelBuilder.Entity("ExpensesManager.Domain.Entities.InvoiceMonth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("invoice_months", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6d642ac8-521d-4651-91d9-c1eb0f7954d3"),
                            Code = 1,
                            CreatedAt = new DateTime(2024, 7, 20, 22, 47, 17, 675, DateTimeKind.Local).AddTicks(3530),
                            Name = "Janeio"
                        },
                        new
                        {
                            Id = new Guid("20624d88-1d16-41d4-a4d0-b923bc1a34af"),
                            Code = 2,
                            CreatedAt = new DateTime(2024, 7, 20, 22, 47, 17, 675, DateTimeKind.Local).AddTicks(3540),
                            Name = "Fevereiro"
                        },
                        new
                        {
                            Id = new Guid("65be0841-36dc-4c6a-bd84-e237332da601"),
                            Code = 3,
                            CreatedAt = new DateTime(2024, 7, 20, 22, 47, 17, 675, DateTimeKind.Local).AddTicks(3550),
                            Name = "Marco"
                        },
                        new
                        {
                            Id = new Guid("7d82c60d-340c-483f-9f5a-1cc50d8d6196"),
                            Code = 4,
                            CreatedAt = new DateTime(2024, 7, 20, 22, 47, 17, 675, DateTimeKind.Local).AddTicks(3550),
                            Name = "Abril"
                        },
                        new
                        {
                            Id = new Guid("8f9e9e23-a570-493e-b9e2-204a0303758b"),
                            Code = 5,
                            CreatedAt = new DateTime(2024, 7, 20, 22, 47, 17, 675, DateTimeKind.Local).AddTicks(3560),
                            Name = "Maio"
                        },
                        new
                        {
                            Id = new Guid("373be07e-0a93-4548-8c9c-ca08e6297092"),
                            Code = 6,
                            CreatedAt = new DateTime(2024, 7, 20, 22, 47, 17, 675, DateTimeKind.Local).AddTicks(3570),
                            Name = "Junho"
                        },
                        new
                        {
                            Id = new Guid("d529e867-7e97-42c9-83c0-7f833247b671"),
                            Code = 7,
                            CreatedAt = new DateTime(2024, 7, 20, 22, 47, 17, 675, DateTimeKind.Local).AddTicks(3580),
                            Name = "Julho"
                        },
                        new
                        {
                            Id = new Guid("6909d2ad-90b6-409f-b0b9-183d4bf249ca"),
                            Code = 8,
                            CreatedAt = new DateTime(2024, 7, 20, 22, 47, 17, 675, DateTimeKind.Local).AddTicks(3580),
                            Name = "Agosto"
                        },
                        new
                        {
                            Id = new Guid("3ecbd482-79d0-4c49-9362-8b1fa6f8dbc3"),
                            Code = 9,
                            CreatedAt = new DateTime(2024, 7, 20, 22, 47, 17, 675, DateTimeKind.Local).AddTicks(3590),
                            Name = "Setembro"
                        },
                        new
                        {
                            Id = new Guid("1ed05727-390d-48ed-a20e-d64d827953bc"),
                            Code = 10,
                            CreatedAt = new DateTime(2024, 7, 20, 22, 47, 17, 675, DateTimeKind.Local).AddTicks(3600),
                            Name = "Outubro"
                        },
                        new
                        {
                            Id = new Guid("ebdb56f2-c91c-4145-972b-cb10b4036fd5"),
                            Code = 11,
                            CreatedAt = new DateTime(2024, 7, 20, 22, 47, 17, 675, DateTimeKind.Local).AddTicks(3610),
                            Name = "Novembro"
                        },
                        new
                        {
                            Id = new Guid("2c92607c-e75d-4266-96a7-5a9e5af8a861"),
                            Code = 12,
                            CreatedAt = new DateTime(2024, 7, 20, 22, 47, 17, 675, DateTimeKind.Local).AddTicks(3610),
                            Name = "Dezembro"
                        });
                });

            modelBuilder.Entity("ExpensesManager.Domain.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("people", (string)null);
                });

            modelBuilder.Entity("ExpensesManager.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.HasKey("Id")
                        .HasName("id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ExpensesManager.Domain.Entities.Expense", b =>
                {
                    b.HasOne("ExpensesManager.Domain.Entities.Person", "Person")
                        .WithMany("Expenses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("person_id");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ExpensesManager.Domain.Entities.Person", b =>
                {
                    b.HasOne("ExpensesManager.Domain.Entities.User", "User")
                        .WithMany("People")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExpensesManager.Domain.Entities.Person", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("ExpensesManager.Domain.Entities.User", b =>
                {
                    b.Navigation("People");
                });
#pragma warning restore 612, 618
        }
    }
}
