// <auto-generated />
using System;
using ExpensesManager.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ExpensesManager.Infra.Migrations
{
    [DbContext(typeof(ExpensesManagerContext))]
    [Migration("20240803151901_Add_Installment_Fields_Table_Expense")]
    partial class Add_Installment_Fields_Table_Expense
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ExpensesManager.Domain.Entities.CreditCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("credit_card", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bbafbe9e-439c-4fba-aa54-5d86a13ec63a"),
                            CreatedAt = new DateTime(2024, 8, 3, 12, 19, 0, 999, DateTimeKind.Local).AddTicks(9170),
                            Name = "Inter Gold"
                        },
                        new
                        {
                            Id = new Guid("198bbd24-c87e-449d-af32-a6533d9a160e"),
                            CreatedAt = new DateTime(2024, 8, 3, 12, 19, 0, 999, DateTimeKind.Local).AddTicks(9200),
                            Name = "Inter Black"
                        },
                        new
                        {
                            Id = new Guid("146a4c2e-29e3-4d8b-a33d-01048d81bb5f"),
                            CreatedAt = new DateTime(2024, 8, 3, 12, 19, 0, 999, DateTimeKind.Local).AddTicks(9210),
                            Name = "Amex TGC"
                        },
                        new
                        {
                            Id = new Guid("abcb4bb5-9955-4a5f-af6c-19c4185dc28e"),
                            CreatedAt = new DateTime(2024, 8, 3, 12, 19, 0, 999, DateTimeKind.Local).AddTicks(9220),
                            Name = "XP Visa Infinite"
                        },
                        new
                        {
                            Id = new Guid("d26e8643-67e9-4ebd-b535-5283eab6996b"),
                            CreatedAt = new DateTime(2024, 8, 3, 12, 19, 0, 999, DateTimeKind.Local).AddTicks(9230),
                            Name = "BB Elo Mais"
                        },
                        new
                        {
                            Id = new Guid("c2a23e50-89eb-4ae1-b58f-c6889667b47d"),
                            CreatedAt = new DateTime(2024, 8, 3, 12, 19, 0, 999, DateTimeKind.Local).AddTicks(9240),
                            Name = "C6 Bank Standard"
                        });
                });

            modelBuilder.Entity("ExpensesManager.Domain.Entities.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreditCardName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("credit_card_name");

                    b.Property<int>("CurrentInstallment")
                        .HasColumnType("integer")
                        .HasColumnName("current_installment");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("InstallmentPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("intallment_price");

                    b.Property<Guid>("InvoiceMonthId")
                        .HasMaxLength(10)
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_month_id");

                    b.Property<bool>("IsInstallment")
                        .HasColumnType("boolean")
                        .HasColumnName("is_installment");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("purchase_date");

                    b.Property<int>("TotalInstallments")
                        .HasColumnType("integer")
                        .HasColumnName("total_installments");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceMonthId");

                    b.HasIndex("PersonId");

                    b.ToTable("expenses", (string)null);
                });

            modelBuilder.Entity("ExpensesManager.Domain.Entities.InvoiceMonth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("invoice_months", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("77a5f79c-b979-4361-bfb1-c82cf2c8c29e"),
                            Code = 1,
                            CreatedAt = new DateTime(2024, 8, 3, 12, 19, 0, 999, DateTimeKind.Local).AddTicks(9880),
                            Name = "Janeiro"
                        },
                        new
                        {
                            Id = new Guid("05e2736f-d70d-48ff-9b82-77e07a9f202f"),
                            Code = 2,
                            CreatedAt = new DateTime(2024, 8, 3, 12, 19, 0, 999, DateTimeKind.Local).AddTicks(9890),
                            Name = "Fevereiro"
                        },
                        new
                        {
                            Id = new Guid("830758d0-acb5-4066-8c73-d9bc805d86aa"),
                            Code = 3,
                            CreatedAt = new DateTime(2024, 8, 3, 12, 19, 0, 999, DateTimeKind.Local).AddTicks(9900),
                            Name = "Marco"
                        },
                        new
                        {
                            Id = new Guid("df265a81-89f7-4cb6-8b4c-21e8cb946989"),
                            Code = 4,
                            CreatedAt = new DateTime(2024, 8, 3, 12, 19, 0, 999, DateTimeKind.Local).AddTicks(9900),
                            Name = "Abril"
                        },
                        new
                        {
                            Id = new Guid("60b63973-40ec-47b8-afa3-aa0faba522df"),
                            Code = 5,
                            CreatedAt = new DateTime(2024, 8, 3, 12, 19, 0, 999, DateTimeKind.Local).AddTicks(9910),
                            Name = "Maio"
                        },
                        new
                        {
                            Id = new Guid("8f78f625-e55c-46b5-ba8c-32c05775a832"),
                            Code = 6,
                            CreatedAt = new DateTime(2024, 8, 3, 12, 19, 0, 999, DateTimeKind.Local).AddTicks(9920),
                            Name = "Junho"
                        },
                        new
                        {
                            Id = new Guid("4caa05c0-e965-452a-a567-4682533eb9c8"),
                            Code = 7,
                            CreatedAt = new DateTime(2024, 8, 3, 12, 19, 0, 999, DateTimeKind.Local).AddTicks(9930),
                            Name = "Julho"
                        },
                        new
                        {
                            Id = new Guid("701347ac-c63b-46f1-a28e-7b6ace293f84"),
                            Code = 8,
                            CreatedAt = new DateTime(2024, 8, 3, 12, 19, 0, 999, DateTimeKind.Local).AddTicks(9930),
                            Name = "Agosto"
                        },
                        new
                        {
                            Id = new Guid("99f51a2c-550f-4051-9ce0-148dd7a7d762"),
                            Code = 9,
                            CreatedAt = new DateTime(2024, 8, 3, 12, 19, 0, 999, DateTimeKind.Local).AddTicks(9940),
                            Name = "Setembro"
                        },
                        new
                        {
                            Id = new Guid("0bac5005-95ae-40b4-b7b0-a1e030e98705"),
                            Code = 10,
                            CreatedAt = new DateTime(2024, 8, 3, 12, 19, 0, 999, DateTimeKind.Local).AddTicks(9950),
                            Name = "Outubro"
                        },
                        new
                        {
                            Id = new Guid("719d1ca5-a742-4759-b076-1f4a50b6e3a3"),
                            Code = 11,
                            CreatedAt = new DateTime(2024, 8, 3, 12, 19, 0, 999, DateTimeKind.Local).AddTicks(9960),
                            Name = "Novembro"
                        },
                        new
                        {
                            Id = new Guid("b4c198ef-7e46-4b7f-824f-e6daac67e678"),
                            Code = 12,
                            CreatedAt = new DateTime(2024, 8, 3, 12, 19, 0, 999, DateTimeKind.Local).AddTicks(9960),
                            Name = "Dezembro"
                        });
                });

            modelBuilder.Entity("ExpensesManager.Domain.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("people", (string)null);
                });

            modelBuilder.Entity("ExpensesManager.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.HasKey("Id")
                        .HasName("id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ExpensesManager.Domain.Entities.Expense", b =>
                {
                    b.HasOne("ExpensesManager.Domain.Entities.InvoiceMonth", "InvoiceMonth")
                        .WithMany("Expenses")
                        .HasForeignKey("InvoiceMonthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("invoice_month_id");

                    b.HasOne("ExpensesManager.Domain.Entities.Person", "Person")
                        .WithMany("Expenses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("person_id");

                    b.Navigation("InvoiceMonth");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ExpensesManager.Domain.Entities.Person", b =>
                {
                    b.HasOne("ExpensesManager.Domain.Entities.User", "User")
                        .WithMany("People")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExpensesManager.Domain.Entities.InvoiceMonth", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("ExpensesManager.Domain.Entities.Person", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("ExpensesManager.Domain.Entities.User", b =>
                {
                    b.Navigation("People");
                });
#pragma warning restore 612, 618
        }
    }
}
